
stm32f103c6_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000418  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  4 .ARM          00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000548  08000548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000550  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000550  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000194f  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000416  00000000  00000000  00011ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000458  00000000  00000000  000122de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b14  00000000  00000000  00012890  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cc2  00000000  00000000  000143a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076b0  00000000  00000000  00015066  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000240  00000000  00000000  0001c794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000530 	.word	0x08000530

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000530 	.word	0x08000530

08000170 <RCC_CONFIGURE>:

/**
 * @brief 
 * 
 */
void RCC_CONFIGURE() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0


	RCC_GPIOA_CLK_EN() ;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <RCC_CONFIGURE+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_CONFIGURE>:

/**
 * @brief 
 * 
 */
void GPIO_CONFIGURE() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0

	GPIO_config_t pinconfig ;


	///PORTA.PIN1 INPUT FLOATING MODE PULLUP resistor (SINGLE PRESS) (high z)
	pinconfig.GpioMode = GPIO_MODE_Floating_input ;
 800019e:	2301      	movs	r3, #1
 80001a0:	71bb      	strb	r3, [r7, #6]
	pinconfig.PinNumber= GPIO_PIN1 ;
 80001a2:	2302      	movs	r3, #2
 80001a4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOA, &pinconfig);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4812      	ldr	r0, [pc, #72]	; (80001f4 <GPIO_CONFIGURE+0x5c>)
 80001ac:	f000 f8f4 	bl	8000398 <MCAL_GPIO_INIT>

	///PORTB.PIN1 OUTPUT PUSH-PULL
	pinconfig.GpioMode = GPIO_MODE_output_push_pull ;
 80001b0:	2304      	movs	r3, #4
 80001b2:	71bb      	strb	r3, [r7, #6]
	pinconfig.PinNumber= GPIO_PIN1 ;
 80001b4:	2302      	movs	r3, #2
 80001b6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &pinconfig) ;
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	4619      	mov	r1, r3
 80001bc:	480e      	ldr	r0, [pc, #56]	; (80001f8 <GPIO_CONFIGURE+0x60>)
 80001be:	f000 f8eb 	bl	8000398 <MCAL_GPIO_INIT>

	///PORTA.PIN13 INPUT FLOATING MODE PULLUP resistor (SINGLE PRESS) (high z)
	pinconfig.GpioMode = GPIO_MODE_Floating_input ;
 80001c2:	2301      	movs	r3, #1
 80001c4:	71bb      	strb	r3, [r7, #6]
	pinconfig.PinNumber= GPIO_PIN13 ;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOA, &pinconfig);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <GPIO_CONFIGURE+0x5c>)
 80001d2:	f000 f8e1 	bl	8000398 <MCAL_GPIO_INIT>


	///PORTB.PIN13 OUTPUT PUSH-PULL
	pinconfig.GpioMode = GPIO_MODE_output_push_pull ;
 80001d6:	2304      	movs	r3, #4
 80001d8:	71bb      	strb	r3, [r7, #6]
	pinconfig.PinNumber= GPIO_PIN13 ;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &pinconfig) ;
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <GPIO_CONFIGURE+0x60>)
 80001e6:	f000 f8d7 	bl	8000398 <MCAL_GPIO_INIT>


}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800
 80001f8:	40010c00 	.word	0x40010c00

080001fc <main>:



int main(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0



	RCC_CONFIGURE() ;
 8000202:	f7ff ffb5 	bl	8000170 <RCC_CONFIGURE>
	GPIO_CONFIGURE() ;
 8000206:	f7ff ffc7 	bl	8000198 <GPIO_CONFIGURE>

	while(1){
		//single press  EXTERNAL PUR

		if   (  MCAL_GPIO_READPIN(GPIOA, GPIO_PIN1)  == 0 )
 800020a:	2102      	movs	r1, #2
 800020c:	481a      	ldr	r0, [pc, #104]	; (8000278 <main+0x7c>)
 800020e:	f000 f942 	bl	8000496 <MCAL_GPIO_READPIN>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d116      	bne.n	8000246 <main+0x4a>
		{

			MCAL_GPIO_togglePIN(GPIOB, GPIO_PIN1) ;
 8000218:	2102      	movs	r1, #2
 800021a:	4818      	ldr	r0, [pc, #96]	; (800027c <main+0x80>)
 800021c:	f000 f952 	bl	80004c4 <MCAL_GPIO_togglePIN>
			while(MCAL_GPIO_READPIN(GPIOA, GPIO_PIN1) == 0 );
 8000220:	bf00      	nop
 8000222:	2102      	movs	r1, #2
 8000224:	4814      	ldr	r0, [pc, #80]	; (8000278 <main+0x7c>)
 8000226:	f000 f936 	bl	8000496 <MCAL_GPIO_READPIN>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f8      	beq.n	8000222 <main+0x26>

			for (int i = 0; i < 5000; i++);
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	e002      	b.n	800023c <main+0x40>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000242:	4293      	cmp	r3, r2
 8000244:	ddf7      	ble.n	8000236 <main+0x3a>
		}

		if  (   MCAL_GPIO_READPIN(GPIOA, GPIO_PIN13)== 1 )
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <main+0x7c>)
 800024c:	f000 f923 	bl	8000496 <MCAL_GPIO_READPIN>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	d1d9      	bne.n	800020a <main+0xe>

		{
			//TOGGEL_BIT(gpioB_ODR, 13);
			MCAL_GPIO_togglePIN(GPIOB, GPIO_PIN13) ;
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <main+0x80>)
 800025c:	f000 f932 	bl	80004c4 <MCAL_GPIO_togglePIN>
			for (int i = 0; i < 5000; i++);
 8000260:	2300      	movs	r3, #0
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	e002      	b.n	800026c <main+0x70>
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000272:	4293      	cmp	r3, r2
 8000274:	ddf7      	ble.n	8000266 <main+0x6a>
		if   (  MCAL_GPIO_READPIN(GPIOA, GPIO_PIN1)  == 0 )
 8000276:	e7c8      	b.n	800020a <main+0xe>
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f91b 	bl	80004e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ffa3 	bl	80001fc <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	08000550 	.word	0x08000550
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>

080002d2 <MCAL_GPIO_CRLH>:


/// @brief this function gets the pin location on registers CRL and CRH
/// @param PinNumber 
/// @return 0
uint16_t MCAL_GPIO_CRLH (uint16_t PinNumber ) {
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	4603      	mov	r3, r0
 80002da:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber)
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	2b80      	cmp	r3, #128	; 0x80
 80002e0:	d042      	beq.n	8000368 <MCAL_GPIO_CRLH+0x96>
 80002e2:	2b80      	cmp	r3, #128	; 0x80
 80002e4:	dc11      	bgt.n	800030a <MCAL_GPIO_CRLH+0x38>
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	d036      	beq.n	8000358 <MCAL_GPIO_CRLH+0x86>
 80002ea:	2b08      	cmp	r3, #8
 80002ec:	dc06      	bgt.n	80002fc <MCAL_GPIO_CRLH+0x2a>
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d02e      	beq.n	8000350 <MCAL_GPIO_CRLH+0x7e>
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	d02e      	beq.n	8000354 <MCAL_GPIO_CRLH+0x82>
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d028      	beq.n	800034c <MCAL_GPIO_CRLH+0x7a>
 80002fa:	e047      	b.n	800038c <MCAL_GPIO_CRLH+0xba>
 80002fc:	2b20      	cmp	r3, #32
 80002fe:	d02f      	beq.n	8000360 <MCAL_GPIO_CRLH+0x8e>
 8000300:	2b40      	cmp	r3, #64	; 0x40
 8000302:	d02f      	beq.n	8000364 <MCAL_GPIO_CRLH+0x92>
 8000304:	2b10      	cmp	r3, #16
 8000306:	d029      	beq.n	800035c <MCAL_GPIO_CRLH+0x8a>
 8000308:	e040      	b.n	800038c <MCAL_GPIO_CRLH+0xba>
 800030a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800030e:	d033      	beq.n	8000378 <MCAL_GPIO_CRLH+0xa6>
 8000310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000314:	dc09      	bgt.n	800032a <MCAL_GPIO_CRLH+0x58>
 8000316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031a:	d029      	beq.n	8000370 <MCAL_GPIO_CRLH+0x9e>
 800031c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000320:	d028      	beq.n	8000374 <MCAL_GPIO_CRLH+0xa2>
 8000322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000326:	d021      	beq.n	800036c <MCAL_GPIO_CRLH+0x9a>
 8000328:	e030      	b.n	800038c <MCAL_GPIO_CRLH+0xba>
 800032a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800032e:	d027      	beq.n	8000380 <MCAL_GPIO_CRLH+0xae>
 8000330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000334:	dc03      	bgt.n	800033e <MCAL_GPIO_CRLH+0x6c>
 8000336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800033a:	d01f      	beq.n	800037c <MCAL_GPIO_CRLH+0xaa>
 800033c:	e026      	b.n	800038c <MCAL_GPIO_CRLH+0xba>
 800033e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000342:	d01f      	beq.n	8000384 <MCAL_GPIO_CRLH+0xb2>
 8000344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000348:	d01e      	beq.n	8000388 <MCAL_GPIO_CRLH+0xb6>
 800034a:	e01f      	b.n	800038c <MCAL_GPIO_CRLH+0xba>
	{

	case GPIO_PIN0 :
		return 0 ;
 800034c:	2300      	movs	r3, #0
 800034e:	e01e      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN1 :
		return 4 ;
 8000350:	2304      	movs	r3, #4
 8000352:	e01c      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN2 :
		return 8 ;
 8000354:	2308      	movs	r3, #8
 8000356:	e01a      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN3 :
		return 12 ;
 8000358:	230c      	movs	r3, #12
 800035a:	e018      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN4 :
		return 16 ;
 800035c:	2310      	movs	r3, #16
 800035e:	e016      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN5 :
		return 20 ;
 8000360:	2314      	movs	r3, #20
 8000362:	e014      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN6 :
		return 24 ;
 8000364:	2318      	movs	r3, #24
 8000366:	e012      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN7 :
		return 28 ;
 8000368:	231c      	movs	r3, #28
 800036a:	e010      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;



	case GPIO_PIN8 :
		return 0 ;
 800036c:	2300      	movs	r3, #0
 800036e:	e00e      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN9 :
		return 4 ;
 8000370:	2304      	movs	r3, #4
 8000372:	e00c      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN10 :
		return 8 ;
 8000374:	2308      	movs	r3, #8
 8000376:	e00a      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN11 :
		return 12 ;
 8000378:	230c      	movs	r3, #12
 800037a:	e008      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN12 :
		return 16 ;
 800037c:	2310      	movs	r3, #16
 800037e:	e006      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN13 :
		return 20 ;
 8000380:	2314      	movs	r3, #20
 8000382:	e004      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN14:
		return 24 ;
 8000384:	2318      	movs	r3, #24
 8000386:	e002      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN15 :
		return 28 ;
 8000388:	231c      	movs	r3, #28
 800038a:	e000      	b.n	800038e <MCAL_GPIO_CRLH+0xbc>




	}
	return 0 ;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <MCAL_GPIO_INIT>:
 * @param [in] -GPIOx specifies the gpio instant and register to be configured
 * @param [in] -configx specifies the type of the configuration to be done
 * @retval - none
 * Note- the package LQF48 has only instant of gpio A,B and  part of C,D
 */
void MCAL_GPIO_INIT(GPIO_typedef* GPIOx,GPIO_config_t* configx ) {
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]

	//	Port configuration register low (GPIOx_CRL) (x=0..7)
	//	Port configuration register high (GPIOx_CRH) (x=8..15)


	volatile uint32_t* configRegister = NULL  ;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
	uint8_t PINType =0 ;
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
	configRegister = (configx->PinNumber < GPIO_PIN8)?  &GPIOx->CRL : &GPIOx->CRH ;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	2bff      	cmp	r3, #255	; 0xff
 80003b0:	d801      	bhi.n	80003b6 <MCAL_GPIO_INIT+0x1e>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	e001      	b.n	80003ba <MCAL_GPIO_INIT+0x22>
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3304      	adds	r3, #4
 80003ba:	60bb      	str	r3, [r7, #8]

	// clear  CNFx[1:0] MODEx[1:0]

	(*configRegister) &= ~(0xF << MCAL_GPIO_CRLH(configx->PinNumber) ) ;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff86 	bl	80002d2 <MCAL_GPIO_CRLH>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	230f      	movs	r3, #15
 80003cc:	4093      	lsls	r3, r2
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	401a      	ands	r2, r3
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	601a      	str	r2, [r3, #0]

	// if pin to be configured as output
	if ((configx->GpioMode == GPIO_MODE_output_push_pull)||(configx->GpioMode == GPIO_MODE_output_open_drain) ||
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d00b      	beq.n	80003fa <MCAL_GPIO_INIT+0x62>
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	789b      	ldrb	r3, [r3, #2]
 80003e6:	2b05      	cmp	r3, #5
 80003e8:	d007      	beq.n	80003fa <MCAL_GPIO_INIT+0x62>
			(configx->GpioMode == GPIO_MODE_Afio_PP) || (configx->GpioMode == GPIO_MODE_Afio_OD)){
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	789b      	ldrb	r3, [r3, #2]
	if ((configx->GpioMode == GPIO_MODE_output_push_pull)||(configx->GpioMode == GPIO_MODE_output_open_drain) ||
 80003ee:	2b06      	cmp	r3, #6
 80003f0:	d003      	beq.n	80003fa <MCAL_GPIO_INIT+0x62>
			(configx->GpioMode == GPIO_MODE_Afio_PP) || (configx->GpioMode == GPIO_MODE_Afio_OD)){
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b07      	cmp	r3, #7
 80003f8:	d10e      	bne.n	8000418 <MCAL_GPIO_INIT+0x80>
		// set  CNFx[1:0] MODEx[1:0]
		PINType = (((((configx->GpioMode) - 4) <<2 ) |   (configx->GpioSpeed)) & 0x0f ) ;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	3b04      	subs	r3, #4
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	b25a      	sxtb	r2, r3
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	78db      	ldrb	r3, [r3, #3]
 8000408:	b25b      	sxtb	r3, r3
 800040a:	4313      	orrs	r3, r2
 800040c:	b25b      	sxtb	r3, r3
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e02c      	b.n	8000472 <MCAL_GPIO_INIT+0xda>
	}
	// if pin to be configured as input ->	MODEx[00]
	else
	{

		if ((configx->GpioMode == GPIO_MODE_Floating_input)||(configx->GpioMode == GPIO_MODE_Analog))
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	789b      	ldrb	r3, [r3, #2]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d003      	beq.n	8000428 <MCAL_GPIO_INIT+0x90>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	789b      	ldrb	r3, [r3, #2]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d107      	bne.n	8000438 <MCAL_GPIO_INIT+0xa0>
		{
			// set  CNFx[1:0] MODEx[00]
			PINType = (((((configx->GpioMode) ) << 2 ) |   (0x0)) & 0x0f ) ;
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	789b      	ldrb	r3, [r3, #2]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	b2db      	uxtb	r3, r3
 8000430:	f003 030f 	and.w	r3, r3, #15
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e01c      	b.n	8000472 <MCAL_GPIO_INIT+0xda>
		}else if((configx->GpioMode == GPIO_MODE_Afio_Input))
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	2b08      	cmp	r3, #8
 800043e:	d102      	bne.n	8000446 <MCAL_GPIO_INIT+0xae>
		{

			// set  CNFx[1:0] MODEx[00]
			PINType = (((((GPIO_MODE_Floating_input) ) << 2 ) |   (0x0)) & 0x0f ) ;
 8000440:	2304      	movs	r3, #4
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e015      	b.n	8000472 <MCAL_GPIO_INIT+0xda>

		}else // input PU PD
		{

			PINType = (((((GPIO_MODE_Input_pull_up) ) << 2 ) |   (0x0)) & 0x0f ) ;
 8000446:	2308      	movs	r3, #8
 8000448:	73fb      	strb	r3, [r7, #15]

			if ((configx->GpioMode == GPIO_MODE_Input_pull_up)) {
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d107      	bne.n	8000462 <MCAL_GPIO_INIT+0xca>
				// input PU set ODRx to 1
				GPIOx->ODR |= (configx->PinNumber) ;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	8812      	ldrh	r2, [r2, #0]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	e007      	b.n	8000472 <MCAL_GPIO_INIT+0xda>

			}else
			{
				// input PD reset ODRx to 0

				GPIOx->ODR &= ~(configx->PinNumber) ;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	8812      	ldrh	r2, [r2, #0]
 800046a:	43d2      	mvns	r2, r2
 800046c:	401a      	ands	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	60da      	str	r2, [r3, #12]

	}


	// write on  CRL or CRH
	(*configRegister)  |= ((PINType) << (MCAL_GPIO_CRLH(configx->PinNumber)) );
 8000472:	7bfc      	ldrb	r4, [r7, #15]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff2a 	bl	80002d2 <MCAL_GPIO_CRLH>
 800047e:	4603      	mov	r3, r0
 8000480:	fa04 f203 	lsl.w	r2, r4, r3
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	431a      	orrs	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	601a      	str	r2, [r3, #0]

}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bd90      	pop	{r4, r7, pc}

08000496 <MCAL_GPIO_READPIN>:
 * @param [in] -PinNumber specifies pin to be read the data from
 * @retval - uint8_t @ref GPIO_PIN_VALUE
 * Note- the package LQF48 has only instant of gpio A,B and  part of C,D
 */
uint8_t  MCAL_GPIO_READPIN(GPIO_typedef* GPIOx, uint16_t PinNumber )
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	460b      	mov	r3, r1
 80004a0:	807b      	strh	r3, [r7, #2]
	uint8_t pin_value ;

	if ( ((GPIOx->IDR) & PinNumber)!= (uint32_t)PIN_RESET )
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	887b      	ldrh	r3, [r7, #2]
 80004a8:	4013      	ands	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d002      	beq.n	80004b4 <MCAL_GPIO_READPIN+0x1e>
	{
		pin_value = PIN_SET ;
 80004ae:	2301      	movs	r3, #1
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e001      	b.n	80004b8 <MCAL_GPIO_READPIN+0x22>


	}else
	{

		pin_value = PIN_RESET ;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]

	}

	return pin_value ;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <MCAL_GPIO_togglePIN>:
 * @param [in] -GPIOx specifies the gpio instant and register to be configured
 * @param [in] -PinNumber specifies the pin to be toggled
 * @retval - none
 * Note-none
 */
void   MCAL_GPIO_togglePIN(GPIO_typedef* GPIOx , uint16_t PinNumber) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]

	GPIOx ->ODR ^= PinNumber ;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68da      	ldr	r2, [r3, #12]
 80004d4:	887b      	ldrh	r3, [r7, #2]
 80004d6:	405a      	eors	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]

}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <__libc_init_array>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2500      	movs	r5, #0
 80004ec:	4e0c      	ldr	r6, [pc, #48]	; (8000520 <__libc_init_array+0x38>)
 80004ee:	4c0d      	ldr	r4, [pc, #52]	; (8000524 <__libc_init_array+0x3c>)
 80004f0:	1ba4      	subs	r4, r4, r6
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	d109      	bne.n	800050c <__libc_init_array+0x24>
 80004f8:	f000 f81a 	bl	8000530 <_init>
 80004fc:	2500      	movs	r5, #0
 80004fe:	4e0a      	ldr	r6, [pc, #40]	; (8000528 <__libc_init_array+0x40>)
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <__libc_init_array+0x44>)
 8000502:	1ba4      	subs	r4, r4, r6
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	42a5      	cmp	r5, r4
 8000508:	d105      	bne.n	8000516 <__libc_init_array+0x2e>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000510:	4798      	blx	r3
 8000512:	3501      	adds	r5, #1
 8000514:	e7ee      	b.n	80004f4 <__libc_init_array+0xc>
 8000516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800051a:	4798      	blx	r3
 800051c:	3501      	adds	r5, #1
 800051e:	e7f2      	b.n	8000506 <__libc_init_array+0x1e>
 8000520:	08000548 	.word	0x08000548
 8000524:	08000548 	.word	0x08000548
 8000528:	08000548 	.word	0x08000548
 800052c:	0800054c 	.word	0x0800054c

08000530 <_init>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

0800053c <_fini>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr
