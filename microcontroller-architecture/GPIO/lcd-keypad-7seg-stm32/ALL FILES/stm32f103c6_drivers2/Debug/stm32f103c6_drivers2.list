
stm32f103c6_drivers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000cf8  08000cf8  00010cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d28  08000d28  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d28  08000d28  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d28  08000d28  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d28  08000d28  00010d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000d50  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000d50  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003091  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007df  00000000  00000000  000230da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000074c  00000000  00000000  000238b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00024008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000201a  00000000  00000000  00024260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b3f  00000000  00000000  0002627a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007bf3  00000000  00000000  00027db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f9ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  0002fa28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ce0 	.word	0x08000ce0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000ce0 	.word	0x08000ce0

08000170 <RCC_CONFIGURE>:
#define SIX 0x02
#define SEVEN 0x4C
#define EIGHT 0x00
#define NINE 0x10

void RCC_CONFIGURE() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <RCC_CONFIGURE+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <RCC_CONFIGURE+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_CONFIGURE>:

/**
 * @brief 
 * 
 */
void GPIO_CONFIGURE() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	//	MCAL_GPIO_INIT(GPIOA, &pinconfig);

	//PB1 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	//CNF 00: General purpose output push-pull
	pinconfig.PinNumber = GPIO_PIN9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 80001b2:	f000 f94b 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = GPIO_PIN10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 80001ca:	f000 f93f 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = GPIO_PIN11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 80001e2:	f000 f933 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = GPIO_PIN12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 80001fa:	f000 f927 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = GPIO_PIN13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 8000212:	f000 f91b 	bl	800044c <MCAL_GPIO_INIT>

	//============================

	//PA13 input HighZ Floating input (reset state)
	pinconfig.PinNumber = GPIO_PIN14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 800022a:	f000 f90f 	bl	800044c <MCAL_GPIO_INIT>
	//PB13 (output PUSH pull Mode)
	pinconfig.PinNumber = GPIO_PIN15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_CONFIGURE+0xb8>)
 8000242:	f000 f903 	bl	800044c <MCAL_GPIO_INIT>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <main>:

int main(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0

	RCC_CONFIGURE();
 800025a:	f7ff ff89 	bl	8000170 <RCC_CONFIGURE>
	GPIO_CONFIGURE();
 800025e:	f7ff ff9b 	bl	8000198 <GPIO_CONFIGURE>
	LCD_INIT_ALL();
 8000262:	f000 fb8f 	bl	8000984 <LCD_INIT_ALL>
	KEYPAD_INIT();
 8000266:	f000 f9ad 	bl	80005c4 <KEYPAD_INIT>
	//LCD_WRITE_string("hey omar");
//	wait(500);
//	LCD_clear_screen();
	LCD_WRITE_string("7SEG mode");
 800026a:	482d      	ldr	r0, [pc, #180]	; (8000320 <main+0xcc>)
 800026c:	f000 fcc4 	bl	8000bf8 <LCD_WRITE_string>
	wait(500);
 8000270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000274:	f000 fae6 	bl	8000844 <wait>
	LCD_clear_screen();
 8000278:	f000 fbd8 	bl	8000a2c <LCD_clear_screen>
	unsigned char temp;
	unsigned char seg[] = { ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN,
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <main+0xd0>)
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	ca07      	ldmia	r2, {r0, r1, r2}
 8000284:	c303      	stmia	r3!, {r0, r1}
 8000286:	801a      	strh	r2, [r3, #0]
 8000288:	3302      	adds	r3, #2
 800028a:	0c12      	lsrs	r2, r2, #16
 800028c:	701a      	strb	r2, [r3, #0]
			EIGHT, NINE, ZERO };
	unsigned char lcd[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <main+0xd4>)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	ca07      	ldmia	r2, {r0, r1, r2}
 8000294:	c303      	stmia	r3!, {r0, r1}
 8000296:	801a      	strh	r2, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	0c12      	lsrs	r2, r2, #16
 800029c:	701a      	strb	r2, [r3, #0]
			'0' };
	for (int i = 0; i < 11; i++) {
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
 80002a2:	e019      	b.n	80002d8 <main+0x84>
		MCAL_GPIO_WRITEPORT(GPIOB, seg[i] << 9);
 80002a4:	f107 0210 	add.w	r2, r7, #16
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	4413      	add	r3, r2
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	025b      	lsls	r3, r3, #9
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	4619      	mov	r1, r3
 80002b6:	481d      	ldr	r0, [pc, #116]	; (800032c <main+0xd8>)
 80002b8:	f000 f975 	bl	80005a6 <MCAL_GPIO_WRITEPORT>
		LCD_WRITE_char(lcd[i]);
 80002bc:	1d3a      	adds	r2, r7, #4
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	4413      	add	r3, r2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fc71 	bl	8000bac <LCD_WRITE_char>
		wait(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ce:	f000 fab9 	bl	8000844 <wait>
	for (int i = 0; i < 11; i++) {
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	3301      	adds	r3, #1
 80002d6:	61fb      	str	r3, [r7, #28]
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	dde2      	ble.n	80002a4 <main+0x50>
	}
	KEYPAD_INIT();
 80002de:	f000 f971 	bl	80005c4 <KEYPAD_INIT>
	LCD_clear_screen();
 80002e2:	f000 fba3 	bl	8000a2c <LCD_clear_screen>
	LCD_WRITE_string("keypad mode");
 80002e6:	4812      	ldr	r0, [pc, #72]	; (8000330 <main+0xdc>)
 80002e8:	f000 fc86 	bl	8000bf8 <LCD_WRITE_string>
	wait(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f0:	f000 faa8 	bl	8000844 <wait>
	LCD_clear_screen();
 80002f4:	f000 fb9a 	bl	8000a2c <LCD_clear_screen>
	while (1) {
		temp = KEYPAD_GETKEY();
 80002f8:	f000 f9da 	bl	80006b0 <KEYPAD_GETKEY>
 80002fc:	4603      	mov	r3, r0
 80002fe:	76fb      	strb	r3, [r7, #27]

		switch (temp) {
 8000300:	7efb      	ldrb	r3, [r7, #27]
 8000302:	2b3f      	cmp	r3, #63	; 0x3f
 8000304:	d002      	beq.n	800030c <main+0xb8>
 8000306:	2b41      	cmp	r3, #65	; 0x41
 8000308:	d008      	beq.n	800031c <main+0xc8>
 800030a:	e002      	b.n	8000312 <main+0xbe>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 800030c:	f000 fb8e 	bl	8000a2c <LCD_clear_screen>
			break;
 8000310:	e005      	b.n	800031e <main+0xca>
		default:
			LCD_WRITE_char(temp);
 8000312:	7efb      	ldrb	r3, [r7, #27]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fc49 	bl	8000bac <LCD_WRITE_char>
			break;
 800031a:	e000      	b.n	800031e <main+0xca>
			break;
 800031c:	bf00      	nop
		temp = KEYPAD_GETKEY();
 800031e:	e7eb      	b.n	80002f8 <main+0xa4>
 8000320:	08000cf8 	.word	0x08000cf8
 8000324:	08000d10 	.word	0x08000d10
 8000328:	08000d1c 	.word	0x08000d1c
 800032c:	40010c00 	.word	0x40010c00
 8000330:	08000d04 	.word	0x08000d04

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 fc99 	bl	8000c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff75 	bl	8000254 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000378:	08000d30 	.word	0x08000d30
  ldr r2, =_sbss
 800037c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000380:	20000040 	.word	0x20000040

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>

08000386 <MCAL_GPIO_CRLH>:


/// @brief this function gets the pin location on registers CRL and CRH
/// @param PinNumber 
/// @return 0
uint16_t MCAL_GPIO_CRLH (uint16_t PinNumber ) {
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber)
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	2b80      	cmp	r3, #128	; 0x80
 8000394:	d042      	beq.n	800041c <MCAL_GPIO_CRLH+0x96>
 8000396:	2b80      	cmp	r3, #128	; 0x80
 8000398:	dc11      	bgt.n	80003be <MCAL_GPIO_CRLH+0x38>
 800039a:	2b08      	cmp	r3, #8
 800039c:	d036      	beq.n	800040c <MCAL_GPIO_CRLH+0x86>
 800039e:	2b08      	cmp	r3, #8
 80003a0:	dc06      	bgt.n	80003b0 <MCAL_GPIO_CRLH+0x2a>
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d02e      	beq.n	8000404 <MCAL_GPIO_CRLH+0x7e>
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d02e      	beq.n	8000408 <MCAL_GPIO_CRLH+0x82>
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d028      	beq.n	8000400 <MCAL_GPIO_CRLH+0x7a>
 80003ae:	e047      	b.n	8000440 <MCAL_GPIO_CRLH+0xba>
 80003b0:	2b20      	cmp	r3, #32
 80003b2:	d02f      	beq.n	8000414 <MCAL_GPIO_CRLH+0x8e>
 80003b4:	2b40      	cmp	r3, #64	; 0x40
 80003b6:	d02f      	beq.n	8000418 <MCAL_GPIO_CRLH+0x92>
 80003b8:	2b10      	cmp	r3, #16
 80003ba:	d029      	beq.n	8000410 <MCAL_GPIO_CRLH+0x8a>
 80003bc:	e040      	b.n	8000440 <MCAL_GPIO_CRLH+0xba>
 80003be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003c2:	d033      	beq.n	800042c <MCAL_GPIO_CRLH+0xa6>
 80003c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003c8:	dc09      	bgt.n	80003de <MCAL_GPIO_CRLH+0x58>
 80003ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003ce:	d029      	beq.n	8000424 <MCAL_GPIO_CRLH+0x9e>
 80003d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003d4:	d028      	beq.n	8000428 <MCAL_GPIO_CRLH+0xa2>
 80003d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003da:	d021      	beq.n	8000420 <MCAL_GPIO_CRLH+0x9a>
 80003dc:	e030      	b.n	8000440 <MCAL_GPIO_CRLH+0xba>
 80003de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e2:	d027      	beq.n	8000434 <MCAL_GPIO_CRLH+0xae>
 80003e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e8:	dc03      	bgt.n	80003f2 <MCAL_GPIO_CRLH+0x6c>
 80003ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003ee:	d01f      	beq.n	8000430 <MCAL_GPIO_CRLH+0xaa>
 80003f0:	e026      	b.n	8000440 <MCAL_GPIO_CRLH+0xba>
 80003f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003f6:	d01f      	beq.n	8000438 <MCAL_GPIO_CRLH+0xb2>
 80003f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003fc:	d01e      	beq.n	800043c <MCAL_GPIO_CRLH+0xb6>
 80003fe:	e01f      	b.n	8000440 <MCAL_GPIO_CRLH+0xba>
	{

	case GPIO_PIN0 :
		return 0 ;
 8000400:	2300      	movs	r3, #0
 8000402:	e01e      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN1 :
		return 4 ;
 8000404:	2304      	movs	r3, #4
 8000406:	e01c      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN2 :
		return 8 ;
 8000408:	2308      	movs	r3, #8
 800040a:	e01a      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN3 :
		return 12 ;
 800040c:	230c      	movs	r3, #12
 800040e:	e018      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN4 :
		return 16 ;
 8000410:	2310      	movs	r3, #16
 8000412:	e016      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN5 :
		return 20 ;
 8000414:	2314      	movs	r3, #20
 8000416:	e014      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN6 :
		return 24 ;
 8000418:	2318      	movs	r3, #24
 800041a:	e012      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN7 :
		return 28 ;
 800041c:	231c      	movs	r3, #28
 800041e:	e010      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;



	case GPIO_PIN8 :
		return 0 ;
 8000420:	2300      	movs	r3, #0
 8000422:	e00e      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN9 :
		return 4 ;
 8000424:	2304      	movs	r3, #4
 8000426:	e00c      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN10 :
		return 8 ;
 8000428:	2308      	movs	r3, #8
 800042a:	e00a      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;
	case GPIO_PIN11 :
		return 12 ;
 800042c:	230c      	movs	r3, #12
 800042e:	e008      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN12 :
		return 16 ;
 8000430:	2310      	movs	r3, #16
 8000432:	e006      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN13 :
		return 20 ;
 8000434:	2314      	movs	r3, #20
 8000436:	e004      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN14:
		return 24 ;
 8000438:	2318      	movs	r3, #24
 800043a:	e002      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>
		break;

	case GPIO_PIN15 :
		return 28 ;
 800043c:	231c      	movs	r3, #28
 800043e:	e000      	b.n	8000442 <MCAL_GPIO_CRLH+0xbc>




	}
	return 0 ;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <MCAL_GPIO_INIT>:
 * @param [in] -GPIOx specifies the gpio instant and register to be configured
 * @param [in] -configx specifies the type of the configuration to be done
 * @retval - none
 * Note- the package LQF48 has only instant of gpio A,B and  part of C,D
 */
void MCAL_GPIO_INIT(GPIO_typedef* GPIOx,GPIO_config_t* configx ) {
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]

	//	Port configuration register low (GPIOx_CRL) (x=0..7)
	//	Port configuration register high (GPIOx_CRH) (x=8..15)


	volatile uint32_t* configRegister = NULL  ;
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]
	uint8_t PINType =0 ;
 800045a:	2300      	movs	r3, #0
 800045c:	73fb      	strb	r3, [r7, #15]
	configRegister = (configx->PinNumber < GPIO_PIN8)?  &GPIOx->CRL : &GPIOx->CRH ;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	2bff      	cmp	r3, #255	; 0xff
 8000464:	d801      	bhi.n	800046a <MCAL_GPIO_INIT+0x1e>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	e001      	b.n	800046e <MCAL_GPIO_INIT+0x22>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3304      	adds	r3, #4
 800046e:	60bb      	str	r3, [r7, #8]

	// clear  CNFx[1:0] MODEx[1:0]

	(*configRegister) &= ~(0xF << MCAL_GPIO_CRLH(configx->PinNumber) ) ;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff86 	bl	8000386 <MCAL_GPIO_CRLH>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	230f      	movs	r3, #15
 8000480:	4093      	lsls	r3, r2
 8000482:	43da      	mvns	r2, r3
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	401a      	ands	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	601a      	str	r2, [r3, #0]

	// if pin to be configured as output
	if ((configx->GpioMode == GPIO_MODE_output_push_pull)||(configx->GpioMode == GPIO_MODE_output_open_drain) ||
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	789b      	ldrb	r3, [r3, #2]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d00b      	beq.n	80004ae <MCAL_GPIO_INIT+0x62>
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	2b05      	cmp	r3, #5
 800049c:	d007      	beq.n	80004ae <MCAL_GPIO_INIT+0x62>
			(configx->GpioMode == GPIO_MODE_Afio_PP) || (configx->GpioMode == GPIO_MODE_Afio_OD)){
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	789b      	ldrb	r3, [r3, #2]
	if ((configx->GpioMode == GPIO_MODE_output_push_pull)||(configx->GpioMode == GPIO_MODE_output_open_drain) ||
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d003      	beq.n	80004ae <MCAL_GPIO_INIT+0x62>
			(configx->GpioMode == GPIO_MODE_Afio_PP) || (configx->GpioMode == GPIO_MODE_Afio_OD)){
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	789b      	ldrb	r3, [r3, #2]
 80004aa:	2b07      	cmp	r3, #7
 80004ac:	d10e      	bne.n	80004cc <MCAL_GPIO_INIT+0x80>
		// set  CNFx[1:0] MODEx[1:0]
		PINType = (((((configx->GpioMode) - 4) <<2 ) |   (configx->GpioSpeed)) & 0x0f ) ;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	789b      	ldrb	r3, [r3, #2]
 80004b2:	3b04      	subs	r3, #4
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	b25a      	sxtb	r2, r3
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	78db      	ldrb	r3, [r3, #3]
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	4313      	orrs	r3, r2
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f003 030f 	and.w	r3, r3, #15
 80004c8:	73fb      	strb	r3, [r7, #15]
 80004ca:	e02c      	b.n	8000526 <MCAL_GPIO_INIT+0xda>
	}
	// if pin to be configured as input ->	MODEx[00]
	else
	{

		if ((configx->GpioMode == GPIO_MODE_Floating_input)||(configx->GpioMode == GPIO_MODE_Analog))
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	789b      	ldrb	r3, [r3, #2]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d003      	beq.n	80004dc <MCAL_GPIO_INIT+0x90>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d107      	bne.n	80004ec <MCAL_GPIO_INIT+0xa0>
		{
			// set  CNFx[1:0] MODEx[00]
			PINType = (((((configx->GpioMode) ) << 2 ) |   (0x0)) & 0x0f ) ;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e01c      	b.n	8000526 <MCAL_GPIO_INIT+0xda>
		}else if((configx->GpioMode == GPIO_MODE_Afio_Input))
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d102      	bne.n	80004fa <MCAL_GPIO_INIT+0xae>
		{

			// set  CNFx[1:0] MODEx[00]
			PINType = (((((GPIO_MODE_Floating_input) ) << 2 ) |   (0x0)) & 0x0f ) ;
 80004f4:	2304      	movs	r3, #4
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	e015      	b.n	8000526 <MCAL_GPIO_INIT+0xda>

		}else // input PU PD
		{

			PINType = (((((GPIO_MODE_Input_pull_up) ) << 2 ) |   (0x0)) & 0x0f ) ;
 80004fa:	2308      	movs	r3, #8
 80004fc:	73fb      	strb	r3, [r7, #15]

			if ((configx->GpioMode == GPIO_MODE_Input_pull_up)) {
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d107      	bne.n	8000516 <MCAL_GPIO_INIT+0xca>
				// input PU set ODRx to 1
				GPIOx->ODR |= (configx->PinNumber) ;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	431a      	orrs	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	e007      	b.n	8000526 <MCAL_GPIO_INIT+0xda>

			}else
			{
				// input PD reset ODRx to 0

				GPIOx->ODR &= ~(configx->PinNumber) ;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	8812      	ldrh	r2, [r2, #0]
 800051e:	43d2      	mvns	r2, r2
 8000520:	401a      	ands	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60da      	str	r2, [r3, #12]

	}


	// write on  CRL or CRH
	(*configRegister)  |= ((PINType) << (MCAL_GPIO_CRLH(configx->PinNumber)) );
 8000526:	7bfc      	ldrb	r4, [r7, #15]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff2a 	bl	8000386 <MCAL_GPIO_CRLH>
 8000532:	4603      	mov	r3, r0
 8000534:	fa04 f203 	lsl.w	r2, r4, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	431a      	orrs	r2, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]

}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}

0800054a <MCAL_GPIO_READPIN>:
 * @param [in] -PinNumber specifies pin to be read the data from
 * @retval - uint8_t @ref GPIO_PIN_VALUE
 * Note- the package LQF48 has only instant of gpio A,B and  part of C,D
 */
uint8_t  MCAL_GPIO_READPIN(GPIO_typedef* GPIOx, uint16_t PinNumber )
{
 800054a:	b480      	push	{r7}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
	uint8_t pin_value ;

	if ( ((GPIOx->IDR) & PinNumber)!= (uint32_t)PIN_RESET )
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <MCAL_GPIO_READPIN+0x1e>
	{
		pin_value = PIN_SET ;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	e001      	b.n	800056c <MCAL_GPIO_READPIN+0x22>


	}else
	{

		pin_value = PIN_RESET ;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]

	}

	return pin_value ;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <MCAL_GPIO_WRITEPIN>:
 * @param [in] -PinNumber specifies pin to be write the data on
 * @param [in] -value specifies the value to be written
 * @retval - none
 * Note-none
 */
void   MCAL_GPIO_WRITEPIN(GPIO_typedef* GPIOx , uint16_t PinNumber , uint8_t value) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
 8000584:	4613      	mov	r3, r2
 8000586:	707b      	strb	r3, [r7, #1]
	if ( value != (uint8_t)PIN_RESET )
 8000588:	787b      	ldrb	r3, [r7, #1]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <MCAL_GPIO_WRITEPIN+0x1e>
	{
		//	GPIOx->ODR |= PinNumber  ;
		GPIOx->BSRR = (uint32_t)PinNumber  ;
 800058e:	887a      	ldrh	r2, [r7, #2]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	611a      	str	r2, [r3, #16]
	{
		//	GPIOx->ODR &= ~(PinNumber)  ;
		GPIOx->BRR = (uint32_t)PinNumber  ;
	}

}
 8000594:	e002      	b.n	800059c <MCAL_GPIO_WRITEPIN+0x24>
		GPIOx->BRR = (uint32_t)PinNumber  ;
 8000596:	887a      	ldrh	r2, [r7, #2]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	615a      	str	r2, [r3, #20]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <MCAL_GPIO_WRITEPORT>:
 * @param [in] -GPIOx specifies the gpio instant and register to be configured
 * @param [in] -value specifies the value to be written
 * @retval - none
 * Note-none
 */
void   MCAL_GPIO_WRITEPORT(GPIO_typedef* GPIOx , uint16_t value) {
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	807b      	strh	r3, [r7, #2]


	GPIOx->ODR = (uint32_t)value ;
 80005b2:	887a      	ldrh	r2, [r7, #2]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <KEYPAD_INIT>:

#include <KEYPAD_DRIVER/keypad.h>
int Keypad_Row[] = { ROW1, ROW2, ROW3, ROW4 }; //rows of the keypad
int Keypad_Col[] = { COL1, COL2, COL3, COL4 }; //columns

void KEYPAD_INIT() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
//
//	RESET_BIT(DataDir_KEYPAD_PORT,ROW1) ;
//	RESET_BIT(DataDir_KEYPAD_PORT,ROW2) ;
//	RESET_BIT(DataDir_KEYPAD_PORT,ROW3) ;
//	RESET_BIT(DataDir_KEYPAD_PORT,ROW4) ;
	pinconfig.PinNumber = ROW1;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 80005da:	4933      	ldr	r1, [pc, #204]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005dc:	4833      	ldr	r0, [pc, #204]	; (80006ac <KEYPAD_INIT+0xe8>)
 80005de:	f7ff ff35 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = ROW2;
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 80005f4:	492c      	ldr	r1, [pc, #176]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005f6:	482d      	ldr	r0, [pc, #180]	; (80006ac <KEYPAD_INIT+0xe8>)
 80005f8:	f7ff ff28 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = ROW3;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <KEYPAD_INIT+0xe4>)
 80005fe:	2208      	movs	r2, #8
 8000600:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000604:	2204      	movs	r2, #4
 8000606:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800060a:	2201      	movs	r2, #1
 800060c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 800060e:	4926      	ldr	r1, [pc, #152]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000610:	4826      	ldr	r0, [pc, #152]	; (80006ac <KEYPAD_INIT+0xe8>)
 8000612:	f7ff ff1b 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = ROW4;
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000618:	2210      	movs	r2, #16
 800061a:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800061e:	2204      	movs	r2, #4
 8000620:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 8000628:	491f      	ldr	r1, [pc, #124]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800062a:	4820      	ldr	r0, [pc, #128]	; (80006ac <KEYPAD_INIT+0xe8>)
 800062c:	f7ff ff0e 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = COL1;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000632:	2220      	movs	r2, #32
 8000634:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000638:	2204      	movs	r2, #4
 800063a:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800063e:	2201      	movs	r2, #1
 8000640:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <KEYPAD_INIT+0xe8>)
 8000646:	f7ff ff01 	bl	800044c <MCAL_GPIO_INIT>
	pinconfig.PinNumber = COL2;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000652:	2204      	movs	r2, #4
 8000654:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000658:	2201      	movs	r2, #1
 800065a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 800065c:	4912      	ldr	r1, [pc, #72]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <KEYPAD_INIT+0xe8>)
 8000660:	f7ff fef4 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = COL3;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800066c:	2204      	movs	r2, #4
 800066e:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000672:	2201      	movs	r2, #1
 8000674:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <KEYPAD_INIT+0xe8>)
 800067a:	f7ff fee7 	bl	800044c <MCAL_GPIO_INIT>

	pinconfig.PinNumber = COL4;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000684:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000688:	2204      	movs	r2, #4
 800068a:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <KEYPAD_INIT+0xe4>)
 800068e:	2201      	movs	r2, #1
 8000690:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &pinconfig);
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <KEYPAD_INIT+0xe4>)
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <KEYPAD_INIT+0xe8>)
 8000696:	f7ff fed9 	bl	800044c <MCAL_GPIO_INIT>
//	SET_BIT (DataDir_KEYPAD_PORT,COL1) ;
//	SET_BIT (DataDir_KEYPAD_PORT,COL2) ;
//	SET_BIT (DataDir_KEYPAD_PORT,COL3) ;
//	SET_BIT (DataDir_KEYPAD_PORT,COL4) ;
//	KEYPAD_PORT = 0xFF;
	MCAL_GPIO_WRITEPORT(KEYPAD_PORT, 0xFF);
 800069a:	21ff      	movs	r1, #255	; 0xff
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <KEYPAD_INIT+0xe8>)
 800069e:	f7ff ff82 	bl	80005a6 <MCAL_GPIO_WRITEPORT>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <KEYPAD_GETKEY>:


char KEYPAD_GETKEY() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

	volatile unsigned int i, j;

	for (i = 0; i < 4; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e0b4      	b.n	8000826 <KEYPAD_GETKEY+0x176>
//		SET_BIT(KEYPAD_PORT,Keypad_Col[1]) ;
//		SET_BIT(KEYPAD_PORT,Keypad_Col[2]) ;
//		SET_BIT(KEYPAD_PORT,Keypad_Col[3]) ;
//		RESET_BIT(KEYPAD_PORT,Keypad_Col[i]) ;

		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Keypad_Col[0], PIN_SET);
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <KEYPAD_GETKEY+0x188>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	2201      	movs	r2, #1
 80006c4:	4619      	mov	r1, r3
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <KEYPAD_GETKEY+0x18c>)
 80006c8:	f7ff ff56 	bl	8000578 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Keypad_Col[1], PIN_SET);
 80006cc:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <KEYPAD_GETKEY+0x188>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	4859      	ldr	r0, [pc, #356]	; (800083c <KEYPAD_GETKEY+0x18c>)
 80006d8:	f7ff ff4e 	bl	8000578 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Keypad_Col[2], PIN_SET);
 80006dc:	4b56      	ldr	r3, [pc, #344]	; (8000838 <KEYPAD_GETKEY+0x188>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	4855      	ldr	r0, [pc, #340]	; (800083c <KEYPAD_GETKEY+0x18c>)
 80006e8:	f7ff ff46 	bl	8000578 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Keypad_Col[3], PIN_SET);
 80006ec:	4b52      	ldr	r3, [pc, #328]	; (8000838 <KEYPAD_GETKEY+0x188>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	4851      	ldr	r0, [pc, #324]	; (800083c <KEYPAD_GETKEY+0x18c>)
 80006f8:	f7ff ff3e 	bl	8000578 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Keypad_Col[i], PIN_RESET);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a4e      	ldr	r2, [pc, #312]	; (8000838 <KEYPAD_GETKEY+0x188>)
 8000700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000704:	b29b      	uxth	r3, r3
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	484c      	ldr	r0, [pc, #304]	; (800083c <KEYPAD_GETKEY+0x18c>)
 800070c:	f7ff ff34 	bl	8000578 <MCAL_GPIO_WRITEPIN>

		for (j = 0; j < 4; j++) {
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e080      	b.n	8000818 <KEYPAD_GETKEY+0x168>

			if ((MCAL_GPIO_READPIN(KEYPAD_PORT,Keypad_Row[j])) == 0) {
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	4a49      	ldr	r2, [pc, #292]	; (8000840 <KEYPAD_GETKEY+0x190>)
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	b29b      	uxth	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	4846      	ldr	r0, [pc, #280]	; (800083c <KEYPAD_GETKEY+0x18c>)
 8000724:	f7ff ff11 	bl	800054a <MCAL_GPIO_READPIN>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d171      	bne.n	8000812 <KEYPAD_GETKEY+0x162>
				while (!(MCAL_GPIO_READPIN(KEYPAD_PORT,Keypad_Row[j])));
 800072e:	bf00      	nop
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	4a43      	ldr	r2, [pc, #268]	; (8000840 <KEYPAD_GETKEY+0x190>)
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	483f      	ldr	r0, [pc, #252]	; (800083c <KEYPAD_GETKEY+0x18c>)
 800073e:	f7ff ff04 	bl	800054a <MCAL_GPIO_READPIN>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0f3      	beq.n	8000730 <KEYPAD_GETKEY+0x80>
				switch (i) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d861      	bhi.n	8000812 <KEYPAD_GETKEY+0x162>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <KEYPAD_GETKEY+0xa4>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000765 	.word	0x08000765
 8000758:	0800078d 	.word	0x0800078d
 800075c:	080007b5 	.word	0x080007b5
 8000760:	080007dd 	.word	0x080007dd
				case (0):
					if (j == 0)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <KEYPAD_GETKEY+0xbe>
						return '7';
 800076a:	2337      	movs	r3, #55	; 0x37
 800076c:	e060      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 1)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d101      	bne.n	8000778 <KEYPAD_GETKEY+0xc8>
						return '4';
 8000774:	2334      	movs	r3, #52	; 0x34
 8000776:	e05b      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 2)
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d101      	bne.n	8000782 <KEYPAD_GETKEY+0xd2>
						return '1';
 800077e:	2331      	movs	r3, #49	; 0x31
 8000780:	e056      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 3)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d13d      	bne.n	8000804 <KEYPAD_GETKEY+0x154>
						return '?';
 8000788:	233f      	movs	r3, #63	; 0x3f
 800078a:	e051      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					break;
				case (1):
					if (j == 0)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <KEYPAD_GETKEY+0xe6>
						return '8';
 8000792:	2338      	movs	r3, #56	; 0x38
 8000794:	e04c      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 1)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d101      	bne.n	80007a0 <KEYPAD_GETKEY+0xf0>
						return '5';
 800079c:	2335      	movs	r3, #53	; 0x35
 800079e:	e047      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 2)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d101      	bne.n	80007aa <KEYPAD_GETKEY+0xfa>
						return '2';
 80007a6:	2332      	movs	r3, #50	; 0x32
 80007a8:	e042      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 3)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d12b      	bne.n	8000808 <KEYPAD_GETKEY+0x158>
						return '0';
 80007b0:	2330      	movs	r3, #48	; 0x30
 80007b2:	e03d      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					break;
				case (2):
					if (j == 0)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <KEYPAD_GETKEY+0x10e>
						return '9';
 80007ba:	2339      	movs	r3, #57	; 0x39
 80007bc:	e038      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 1)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d101      	bne.n	80007c8 <KEYPAD_GETKEY+0x118>
						return '6';
 80007c4:	2336      	movs	r3, #54	; 0x36
 80007c6:	e033      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 2)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d101      	bne.n	80007d2 <KEYPAD_GETKEY+0x122>
						return '3';
 80007ce:	2333      	movs	r3, #51	; 0x33
 80007d0:	e02e      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 3)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d119      	bne.n	800080c <KEYPAD_GETKEY+0x15c>
						return '=';
 80007d8:	233d      	movs	r3, #61	; 0x3d
 80007da:	e029      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					break;
				case (3):
					if (j == 0)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <KEYPAD_GETKEY+0x136>
						return '/';
 80007e2:	232f      	movs	r3, #47	; 0x2f
 80007e4:	e024      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 1)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d101      	bne.n	80007f0 <KEYPAD_GETKEY+0x140>
						return '*';
 80007ec:	232a      	movs	r3, #42	; 0x2a
 80007ee:	e01f      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 2)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d101      	bne.n	80007fa <KEYPAD_GETKEY+0x14a>
						return '-';
 80007f6:	232d      	movs	r3, #45	; 0x2d
 80007f8:	e01a      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					else if (j == 3)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d107      	bne.n	8000810 <KEYPAD_GETKEY+0x160>
						return '+';
 8000800:	232b      	movs	r3, #43	; 0x2b
 8000802:	e015      	b.n	8000830 <KEYPAD_GETKEY+0x180>
					break;
 8000804:	bf00      	nop
 8000806:	e004      	b.n	8000812 <KEYPAD_GETKEY+0x162>
					break;
 8000808:	bf00      	nop
 800080a:	e002      	b.n	8000812 <KEYPAD_GETKEY+0x162>
					break;
 800080c:	bf00      	nop
 800080e:	e000      	b.n	8000812 <KEYPAD_GETKEY+0x162>
					break;
 8000810:	bf00      	nop
		for (j = 0; j < 4; j++) {
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	f67f af7b 	bls.w	8000716 <KEYPAD_GETKEY+0x66>
	for (i = 0; i < 4; i++) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b03      	cmp	r3, #3
 800082a:	f67f af47 	bls.w	80006bc <KEYPAD_GETKEY+0xc>
				}
			}
		}
	}
	return 'A';
 800082e:	2341      	movs	r3, #65	; 0x41

}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000010 	.word	0x20000010
 800083c:	40010c00 	.word	0x40010c00
 8000840:	20000000 	.word	0x20000000

08000844 <wait>:
#include <LCD_DRIVER/lcd.h>
//#include "STM32F103Cx.h"
//#include "stm32f103c6_gpio.h"
//

	void wait(int time) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	int j, i ;
	for (i=0 ; i< time ; i ++)
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e00b      	b.n	800086a <wait+0x26>
		for (j=0 ; j< 255 ; j ++) ;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e002      	b.n	800085e <wait+0x1a>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2bfe      	cmp	r3, #254	; 0xfe
 8000862:	ddf9      	ble.n	8000858 <wait+0x14>
	for (i=0 ; i< time ; i ++)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	dbef      	blt.n	8000852 <wait+0xe>

	}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <LCD_stat>:


void LCD_stat(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	
//DDRA set 0 read
//DataDir_LCD_PORT &= ~(0xFF<< DATA_shift) ;
	// data pins
		///PORTA.PIN0 GPIO_MODE_Floating_input
		pinconfig.PinNumber = GPIO_PIN0;
 8000880:	4b3e      	ldr	r3, [pc, #248]	; (800097c <LCD_stat+0x100>)
 8000882:	2201      	movs	r2, #1
 8000884:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000886:	4b3d      	ldr	r3, [pc, #244]	; (800097c <LCD_stat+0x100>)
 8000888:	2204      	movs	r2, #4
 800088a:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 800088c:	4b3b      	ldr	r3, [pc, #236]	; (800097c <LCD_stat+0x100>)
 800088e:	2201      	movs	r2, #1
 8000890:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 8000892:	493a      	ldr	r1, [pc, #232]	; (800097c <LCD_stat+0x100>)
 8000894:	483a      	ldr	r0, [pc, #232]	; (8000980 <LCD_stat+0x104>)
 8000896:	f7ff fdd9 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN1 output_push_pull
		pinconfig.PinNumber = GPIO_PIN1;
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <LCD_stat+0x100>)
 800089c:	2202      	movs	r2, #2
 800089e:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <LCD_stat+0x100>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <LCD_stat+0x100>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 80008ac:	4933      	ldr	r1, [pc, #204]	; (800097c <LCD_stat+0x100>)
 80008ae:	4834      	ldr	r0, [pc, #208]	; (8000980 <LCD_stat+0x104>)
 80008b0:	f7ff fdcc 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN2 output_push_pull
		pinconfig.PinNumber = GPIO_PIN2;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <LCD_stat+0x100>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <LCD_stat+0x100>)
 80008bc:	2204      	movs	r2, #4
 80008be:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <LCD_stat+0x100>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 80008c6:	492d      	ldr	r1, [pc, #180]	; (800097c <LCD_stat+0x100>)
 80008c8:	482d      	ldr	r0, [pc, #180]	; (8000980 <LCD_stat+0x104>)
 80008ca:	f7ff fdbf 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN3 output_push_pull
		pinconfig.PinNumber = GPIO_PIN3;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <LCD_stat+0x100>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <LCD_stat+0x100>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <LCD_stat+0x100>)
 80008dc:	2201      	movs	r2, #1
 80008de:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 80008e0:	4926      	ldr	r1, [pc, #152]	; (800097c <LCD_stat+0x100>)
 80008e2:	4827      	ldr	r0, [pc, #156]	; (8000980 <LCD_stat+0x104>)
 80008e4:	f7ff fdb2 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN4 output_push_pull
		pinconfig.PinNumber = GPIO_PIN4;
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <LCD_stat+0x100>)
 80008ea:	2210      	movs	r2, #16
 80008ec:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <LCD_stat+0x100>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <LCD_stat+0x100>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 80008fa:	4920      	ldr	r1, [pc, #128]	; (800097c <LCD_stat+0x100>)
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <LCD_stat+0x104>)
 80008fe:	f7ff fda5 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN5 output_push_pull
		pinconfig.PinNumber = GPIO_PIN5;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <LCD_stat+0x100>)
 8000904:	2220      	movs	r2, #32
 8000906:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <LCD_stat+0x100>)
 800090a:	2204      	movs	r2, #4
 800090c:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <LCD_stat+0x100>)
 8000910:	2201      	movs	r2, #1
 8000912:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 8000914:	4919      	ldr	r1, [pc, #100]	; (800097c <LCD_stat+0x100>)
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <LCD_stat+0x104>)
 8000918:	f7ff fd98 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN6 output_push_pull
		pinconfig.PinNumber = GPIO_PIN6;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <LCD_stat+0x100>)
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <LCD_stat+0x100>)
 8000924:	2204      	movs	r2, #4
 8000926:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <LCD_stat+0x100>)
 800092a:	2201      	movs	r2, #1
 800092c:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 800092e:	4913      	ldr	r1, [pc, #76]	; (800097c <LCD_stat+0x100>)
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <LCD_stat+0x104>)
 8000932:	f7ff fd8b 	bl	800044c <MCAL_GPIO_INIT>
		///PORTA.PIN7 output_push_pull
		pinconfig.PinNumber = GPIO_PIN7;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <LCD_stat+0x100>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	801a      	strh	r2, [r3, #0]
		pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <LCD_stat+0x100>)
 800093e:	2204      	movs	r2, #4
 8000940:	709a      	strb	r2, [r3, #2]
		pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <LCD_stat+0x100>)
 8000944:	2201      	movs	r2, #1
 8000946:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_INIT(LCD_PORT, &pinconfig);
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <LCD_stat+0x100>)
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <LCD_stat+0x104>)
 800094c:	f7ff fd7e 	bl	800044c <MCAL_GPIO_INIT>

//1
	/*Selects read or write.
	0: Write 
	1: Read    <<<< */
		MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, PIN_SET) ;
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <LCD_stat+0x104>)
 8000958:	f7ff fe0e 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  <<<<<<<
	address counter (for read)
	1: Data register (for write and read) */
//	RESET_BIT(LCD_CTRL,RS_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, PIN_RESET) ;
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <LCD_stat+0x104>)
 8000964:	f7ff fe08 	bl	8000578 <MCAL_GPIO_WRITEPIN>

	
//3
	LCD_kick();
 8000968:	f000 f826 	bl	80009b8 <LCD_kick>
//5
	/*Selects read or write.
	0: Write  <<<<<<
	1: Read     */
//	RESET_BIT(LCD_CTRL,RW_SWITCH);
	MCAL_GPIO_WRITEPIN(GPIOA, RW_SWITCH, PIN_RESET) ;
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <LCD_stat+0x104>)
 8000974:	f7ff fe00 	bl	8000578 <MCAL_GPIO_WRITEPIN>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000003c 	.word	0x2000003c
 8000980:	40010800 	.word	0x40010800

08000984 <LCD_INIT_ALL>:


void LCD_INIT_ALL() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	wait(20) ;
 8000988:	2014      	movs	r0, #20
 800098a:	f7ff ff5b 	bl	8000844 <wait>
	LCD_INIT() ;
 800098e:	f000 f857 	bl	8000a40 <LCD_INIT>
	LCD_clear_screen() ;
 8000992:	f000 f84b 	bl	8000a2c <LCD_clear_screen>
	wait(15) ;
 8000996:	200f      	movs	r0, #15
 8000998:	f7ff ff54 	bl	8000844 <wait>
	LCD_COMM(LCD_FUNCTION_8BIT_2LINES);
 800099c:	2038      	movs	r0, #56	; 0x38
 800099e:	f000 f821 	bl	80009e4 <LCD_COMM>
	LCD_COMM(LCD_ENTRY_MODE);
 80009a2:	2006      	movs	r0, #6
 80009a4:	f000 f81e 	bl	80009e4 <LCD_COMM>
	LCD_COMM(LCD_BEGIN_AT_FIRST_ROW);
 80009a8:	2080      	movs	r0, #128	; 0x80
 80009aa:	f000 f81b 	bl	80009e4 <LCD_COMM>
	LCD_COMM(LCD_DISP_ON_CURSOR_BLINK);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f818 	bl	80009e4 <LCD_COMM>

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <LCD_kick>:

void LCD_kick(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
//	SET_BIT(LCD_CTRL,EN_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_SET) ;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <LCD_kick+0x28>)
 80009c4:	f7ff fdd8 	bl	8000578 <MCAL_GPIO_WRITEPIN>

	wait(5);
 80009c8:	2005      	movs	r0, #5
 80009ca:	f7ff ff3b 	bl	8000844 <wait>
	//Starts data read/write <<<
//	RESET_BIT(LCD_CTRL,EN_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_RESET) ;
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <LCD_kick+0x28>)
 80009d6:	f7ff fdcf 	bl	8000578 <MCAL_GPIO_WRITEPIN>

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010800 	.word	0x40010800

080009e4 <LCD_COMM>:


void LCD_COMM(unsigned char command ){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	LCD_stat();
 80009ee:	f7ff ff45 	bl	800087c <LCD_stat>
	//#ifdef EIGHT_BIT_MODE

//	LCD_PORT = command ;
MCAL_GPIO_WRITEPORT(LCD_PORT, command) ;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <LCD_COMM+0x44>)
 80009fa:	f7ff fdd4 	bl	80005a6 <MCAL_GPIO_WRITEPORT>
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  <<<<<<<
	address counter (for read)
	1: Data register (for write and read) */
//	RESET_BIT(LCD_CTRL,RS_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, PIN_RESET) ;
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <LCD_COMM+0x44>)
 8000a06:	f7ff fdb7 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	/*Selects read or write.
	0: Write <<<<
	1: Read*/
//	RESET_BIT(LCD_CTRL,RW_SWITCH);
MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, PIN_RESET) ;
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <LCD_COMM+0x44>)
 8000a12:	f7ff fdb1 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	
	wait(5);
 8000a16:	2005      	movs	r0, #5
 8000a18:	f7ff ff14 	bl	8000844 <wait>
	LCD_kick();
 8000a1c:	f7ff ffcc 	bl	80009b8 <LCD_kick>
//	#endif
//
	
	
	
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40010800 	.word	0x40010800

08000a2c <LCD_clear_screen>:


void LCD_clear_screen(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	wait(5);
 8000a30:	2005      	movs	r0, #5
 8000a32:	f7ff ff07 	bl	8000844 <wait>
	LCD_COMM(LCD_CLEAR_SCREEN) ;
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff ffd4 	bl	80009e4 <LCD_COMM>
	
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_INIT>:

void LCD_INIT(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	wait(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fefd 	bl	8000844 <wait>
//	SET_BIT(DataDir_LCD_CTRL,RW_SWITCH);
//MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_SET) ;
//MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_SET) ;
//MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_SET) ;
	///PORTA.PIN8 INPUT FLOATING MODE
	pinconfig.PinNumber = EN_SWITCH;
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <LCD_INIT+0x164>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a50:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <LCD_INIT+0x164>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <LCD_INIT+0x164>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000a5e:	4951      	ldr	r1, [pc, #324]	; (8000ba4 <LCD_INIT+0x164>)
 8000a60:	4851      	ldr	r0, [pc, #324]	; (8000ba8 <LCD_INIT+0x168>)
 8000a62:	f7ff fcf3 	bl	800044c <MCAL_GPIO_INIT>


	///PORTA.PIN9 INPUT FLOATING MODE
	pinconfig.PinNumber = RW_SWITCH;
 8000a66:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <LCD_INIT+0x164>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000a6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <LCD_INIT+0x164>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000a74:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <LCD_INIT+0x164>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000a7a:	494a      	ldr	r1, [pc, #296]	; (8000ba4 <LCD_INIT+0x164>)
 8000a7c:	484a      	ldr	r0, [pc, #296]	; (8000ba8 <LCD_INIT+0x168>)
 8000a7e:	f7ff fce5 	bl	800044c <MCAL_GPIO_INIT>


	///PORTA.PIN10 INPUT FLOATING MODE
	pinconfig.PinNumber = RS_SWITCH;
 8000a82:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <LCD_INIT+0x164>)
 8000a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a88:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <LCD_INIT+0x164>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <LCD_INIT+0x164>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000a96:	4943      	ldr	r1, [pc, #268]	; (8000ba4 <LCD_INIT+0x164>)
 8000a98:	4843      	ldr	r0, [pc, #268]	; (8000ba8 <LCD_INIT+0x168>)
 8000a9a:	f7ff fcd7 	bl	800044c <MCAL_GPIO_INIT>
	wait(5);
 8000a9e:	2005      	movs	r0, #5
 8000aa0:	f7ff fed0 	bl	8000844 <wait>
	// data pins
	///PORTA.PIN0 output_push_pull
	pinconfig.PinNumber = GPIO_PIN0;
 8000aa4:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <LCD_INIT+0x164>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <LCD_INIT+0x164>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000ab0:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <LCD_INIT+0x164>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000ab6:	493b      	ldr	r1, [pc, #236]	; (8000ba4 <LCD_INIT+0x164>)
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <LCD_INIT+0x168>)
 8000aba:	f7ff fcc7 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN1 output_push_pull
	pinconfig.PinNumber = GPIO_PIN1;
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <LCD_INIT+0x164>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <LCD_INIT+0x164>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <LCD_INIT+0x164>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000ad0:	4934      	ldr	r1, [pc, #208]	; (8000ba4 <LCD_INIT+0x164>)
 8000ad2:	4835      	ldr	r0, [pc, #212]	; (8000ba8 <LCD_INIT+0x168>)
 8000ad4:	f7ff fcba 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN2 output_push_pull
	pinconfig.PinNumber = GPIO_PIN2;
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <LCD_INIT+0x164>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <LCD_INIT+0x164>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <LCD_INIT+0x164>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <LCD_INIT+0x164>)
 8000aec:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <LCD_INIT+0x168>)
 8000aee:	f7ff fcad 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN3 output_push_pull
	pinconfig.PinNumber = GPIO_PIN3;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <LCD_INIT+0x164>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <LCD_INIT+0x164>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <LCD_INIT+0x164>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000b04:	4927      	ldr	r1, [pc, #156]	; (8000ba4 <LCD_INIT+0x164>)
 8000b06:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <LCD_INIT+0x168>)
 8000b08:	f7ff fca0 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN4 output_push_pull
	pinconfig.PinNumber = GPIO_PIN4;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <LCD_INIT+0x164>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <LCD_INIT+0x164>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <LCD_INIT+0x164>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000b1e:	4921      	ldr	r1, [pc, #132]	; (8000ba4 <LCD_INIT+0x164>)
 8000b20:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <LCD_INIT+0x168>)
 8000b22:	f7ff fc93 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN5 output_push_pull
	pinconfig.PinNumber = GPIO_PIN5;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <LCD_INIT+0x164>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <LCD_INIT+0x164>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <LCD_INIT+0x164>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000b38:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <LCD_INIT+0x164>)
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <LCD_INIT+0x168>)
 8000b3c:	f7ff fc86 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN6 output_push_pull
	pinconfig.PinNumber = GPIO_PIN6;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <LCD_INIT+0x164>)
 8000b42:	2240      	movs	r2, #64	; 0x40
 8000b44:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <LCD_INIT+0x164>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <LCD_INIT+0x164>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000b52:	4914      	ldr	r1, [pc, #80]	; (8000ba4 <LCD_INIT+0x164>)
 8000b54:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <LCD_INIT+0x168>)
 8000b56:	f7ff fc79 	bl	800044c <MCAL_GPIO_INIT>
	///PORTA.PIN7 output_push_pull
	pinconfig.PinNumber = GPIO_PIN7;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <LCD_INIT+0x164>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	801a      	strh	r2, [r3, #0]
	pinconfig.GpioMode = GPIO_MODE_output_push_pull;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <LCD_INIT+0x164>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	709a      	strb	r2, [r3, #2]
	pinconfig.GpioSpeed = GPIO_speed10MHz;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <LCD_INIT+0x164>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &pinconfig);
 8000b6c:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LCD_INIT+0x164>)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <LCD_INIT+0x168>)
 8000b70:	f7ff fc6c 	bl	800044c <MCAL_GPIO_INIT>


	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <LCD_INIT+0x168>)
 8000b7c:	f7ff fcfc 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <LCD_INIT+0x168>)
 8000b88:	f7ff fcf6 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <LCD_INIT+0x168>)
 8000b94:	f7ff fcf0 	bl	8000578 <MCAL_GPIO_WRITEPIN>

	
	//set direction of data pins of lcd as output
	//	DataDir_LCD_PORT = 0xFF ;
	
	wait(5);
 8000b98:	2005      	movs	r0, #5
 8000b9a:	f7ff fe53 	bl	8000844 <wait>
//
//	// instructions given by manufacture
//	LCD_COMM(LCD_ENTRY_MODE);
//	LCD_COMM(LCD_BEGIN_AT_FIRST_ROW);
//	LCD_COMM(LCD_DISP_ON_CURSOR_BLINK);
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000003c 	.word	0x2000003c
 8000ba8:	40010800 	.word	0x40010800

08000bac <LCD_WRITE_char>:


extern void LCD_WRITE_char(unsigned char character){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	
	#ifdef EIGHT_BIT_MODE
	LCD_stat();
 8000bb6:	f7ff fe61 	bl	800087c <LCD_stat>
//	LCD_PORT = character;
	MCAL_GPIO_WRITEPORT(LCD_PORT, character) ;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LCD_WRITE_char+0x48>)
 8000bc2:	f7ff fcf0 	bl	80005a6 <MCAL_GPIO_WRITEPORT>
	/*Selects read or write.
	0: Write <<<<
	1: Read*/
//	RESET_BIT(LCD_CTRL,RW_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, PIN_RESET) ;
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <LCD_WRITE_char+0x48>)
 8000bce:	f7ff fcd3 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  
	address counter (for read)
	1: Data register (for write and read)  <<<<<<< */
//	SET_BIT(LCD_CTRL,RS_SWITCH);
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, PIN_SET) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <LCD_WRITE_char+0x48>)
 8000bda:	f7ff fccd 	bl	8000578 <MCAL_GPIO_WRITEPIN>
	wait(500);
 8000bde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be2:	f7ff fe2f 	bl	8000844 <wait>
	LCD_kick();
 8000be6:	f7ff fee7 	bl	80009b8 <LCD_kick>
	LCD_kick();
	#endif
	
	
	
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <LCD_WRITE_string>:


void LCD_WRITE_string( char* string ){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
volatile unsigned int count = 0 ;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
while(*string > 0) {
 8000c04:	e01c      	b.n	8000c40 <LCD_WRITE_string+0x48>
	 LCD_WRITE_char(*string++);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffcc 	bl	8000bac <LCD_WRITE_char>
	count ++ ;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
	if (count == 16 ){
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b10      	cmp	r3, #16
 8000c1e:	d104      	bne.n	8000c2a <LCD_WRITE_string+0x32>
		
	LCD_adjust_XY(2,0) ;
 8000c20:	2100      	movs	r1, #0
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 f814 	bl	8000c50 <LCD_adjust_XY>
 8000c28:	e00a      	b.n	8000c40 <LCD_WRITE_string+0x48>
		
		} else if(count  == 32) {
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d107      	bne.n	8000c40 <LCD_WRITE_string+0x48>
		LCD_clear_screen() ;
 8000c30:	f7ff fefc 	bl	8000a2c <LCD_clear_screen>
		LCD_adjust_XY(1,0) ;
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 f80a 	bl	8000c50 <LCD_adjust_XY>
		count  = 0 ;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
while(*string > 0) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1de      	bne.n	8000c06 <LCD_WRITE_string+0xe>
			}
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LCD_adjust_XY>:





void LCD_adjust_XY(unsigned char line, unsigned char position){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]

if (line == 1)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d108      	bne.n	8000c78 <LCD_adjust_XY+0x28>
{
	if (position < 16 && position >= 0)
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <LCD_adjust_XY+0x28>
	{
		LCD_COMM(LCD_BEGIN_AT_FIRST_ROW+position);
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	3b80      	subs	r3, #128	; 0x80
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff feb6 	bl	80009e4 <LCD_COMM>
	}
}
if (line == 2)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d108      	bne.n	8000c90 <LCD_adjust_XY+0x40>
{
	if (position < 16 && position >= 0)
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d805      	bhi.n	8000c90 <LCD_adjust_XY+0x40>
	{
		LCD_COMM(LCD_BEGIN_AT_SECOND_ROW+position);
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	3b40      	subs	r3, #64	; 0x40
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff feaa 	bl	80009e4 <LCD_COMM>
	}
}

}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <__libc_init_array>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	4e0c      	ldr	r6, [pc, #48]	; (8000cd0 <__libc_init_array+0x38>)
 8000c9e:	4c0d      	ldr	r4, [pc, #52]	; (8000cd4 <__libc_init_array+0x3c>)
 8000ca0:	1ba4      	subs	r4, r4, r6
 8000ca2:	10a4      	asrs	r4, r4, #2
 8000ca4:	42a5      	cmp	r5, r4
 8000ca6:	d109      	bne.n	8000cbc <__libc_init_array+0x24>
 8000ca8:	f000 f81a 	bl	8000ce0 <_init>
 8000cac:	2500      	movs	r5, #0
 8000cae:	4e0a      	ldr	r6, [pc, #40]	; (8000cd8 <__libc_init_array+0x40>)
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <__libc_init_array+0x44>)
 8000cb2:	1ba4      	subs	r4, r4, r6
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	42a5      	cmp	r5, r4
 8000cb8:	d105      	bne.n	8000cc6 <__libc_init_array+0x2e>
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cc0:	4798      	blx	r3
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	e7ee      	b.n	8000ca4 <__libc_init_array+0xc>
 8000cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cca:	4798      	blx	r3
 8000ccc:	3501      	adds	r5, #1
 8000cce:	e7f2      	b.n	8000cb6 <__libc_init_array+0x1e>
 8000cd0:	08000d28 	.word	0x08000d28
 8000cd4:	08000d28 	.word	0x08000d28
 8000cd8:	08000d28 	.word	0x08000d28
 8000cdc:	08000d2c 	.word	0x08000d2c

08000ce0 <_init>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	bf00      	nop
 8000ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce6:	bc08      	pop	{r3}
 8000ce8:	469e      	mov	lr, r3
 8000cea:	4770      	bx	lr

08000cec <_fini>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	bf00      	nop
 8000cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf2:	bc08      	pop	{r3}
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	4770      	bx	lr
