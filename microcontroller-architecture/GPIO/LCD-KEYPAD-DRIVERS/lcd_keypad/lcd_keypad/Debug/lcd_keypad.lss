
lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003e0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b80  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000743  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c7  00000000  00000000  00002503  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000028ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  7a:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_INIT>:



void KEYPAD_INIT() {
	
	RESET_BIT(DataDir_KEYPAD_PORT,ROW1) ;
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
	RESET_BIT(DataDir_KEYPAD_PORT,ROW2) ;
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	81 bb       	out	0x11, r24	; 17
	RESET_BIT(DataDir_KEYPAD_PORT,ROW3) ;
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	81 bb       	out	0x11, r24	; 17
	RESET_BIT(DataDir_KEYPAD_PORT,ROW4) ;
  94:	81 b3       	in	r24, 0x11	; 17
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	81 bb       	out	0x11, r24	; 17
		
	SET_BIT (DataDir_KEYPAD_PORT,COL1) ;
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	81 bb       	out	0x11, r24	; 17
	SET_BIT (DataDir_KEYPAD_PORT,COL2) ;
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	81 bb       	out	0x11, r24	; 17
	SET_BIT (DataDir_KEYPAD_PORT,COL3) ;
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	81 bb       	out	0x11, r24	; 17
	SET_BIT (DataDir_KEYPAD_PORT,COL4) ;
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	81 bb       	out	0x11, r24	; 17
	
	KEYPAD_PORT = 0xFF;	
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	08 95       	ret

000000b8 <KEYPAD_GETKEY>:
}

char KEYPAD_GETKEY(){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <KEYPAD_GETKEY+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <KEYPAD_GETKEY+0x8>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	
		volatile unsigned int i , j ;	
	
	for (i = 0; i < 4; i++){
  c4:	1a 82       	std	Y+2, r1	; 0x02
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	c7 c0       	rjmp	.+398    	; 0x258 <KEYPAD_GETKEY+0x1a0>
		
		SET_BIT(KEYPAD_PORT,Keypad_Col[0]) ;
  ca:	42 b3       	in	r20, 0x12	; 18
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9c 01       	movw	r18, r24
  d6:	00 80       	ld	r0, Z
  d8:	02 c0       	rjmp	.+4      	; 0xde <KEYPAD_GETKEY+0x26>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <KEYPAD_GETKEY+0x22>
  e2:	24 2b       	or	r18, r20
  e4:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,Keypad_Col[1]) ;
  e6:	42 b3       	in	r20, 0x12	; 18
  e8:	9c 01       	movw	r18, r24
  ea:	02 80       	ldd	r0, Z+2	; 0x02
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <KEYPAD_GETKEY+0x3a>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <KEYPAD_GETKEY+0x36>
  f6:	24 2b       	or	r18, r20
  f8:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,Keypad_Col[2]) ;
  fa:	42 b3       	in	r20, 0x12	; 18
  fc:	9c 01       	movw	r18, r24
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <KEYPAD_GETKEY+0x4e>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <KEYPAD_GETKEY+0x4a>
 10a:	24 2b       	or	r18, r20
 10c:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,Keypad_Col[3]) ;
 10e:	42 b3       	in	r20, 0x12	; 18
 110:	9c 01       	movw	r18, r24
 112:	06 80       	ldd	r0, Z+6	; 0x06
 114:	02 c0       	rjmp	.+4      	; 0x11a <KEYPAD_GETKEY+0x62>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <KEYPAD_GETKEY+0x5e>
 11e:	24 2b       	or	r18, r20
 120:	22 bb       	out	0x12, r18	; 18
		RESET_BIT(KEYPAD_PORT,Keypad_Col[i]) ;
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	00 80       	ld	r0, Z
 130:	02 c0       	rjmp	.+4      	; 0x136 <KEYPAD_GETKEY+0x7e>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <KEYPAD_GETKEY+0x7a>
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	92 b3       	in	r25, 0x12	; 18
 140:	89 23       	and	r24, r25
 142:	82 bb       	out	0x12, r24	; 18
		for(j = 0; j < 4; j++){
 144:	1c 82       	std	Y+4, r1	; 0x04
 146:	1b 82       	std	Y+3, r1	; 0x03
 148:	7d c0       	rjmp	.+250    	; 0x244 <KEYPAD_GETKEY+0x18c>
			if (!(keypadPIN & (1 << Keypad_Row[j])))
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	eb 81       	ldd	r30, Y+3	; 0x03
 14e:	fc 81       	ldd	r31, Y+4	; 0x04
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e8 59       	subi	r30, 0x98	; 152
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	00 80       	ld	r0, Z
 15c:	02 c0       	rjmp	.+4      	; 0x162 <KEYPAD_GETKEY+0xaa>
 15e:	95 95       	asr	r25
 160:	87 95       	ror	r24
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <KEYPAD_GETKEY+0xa6>
 166:	80 fd       	sbrc	r24, 0
 168:	68 c0       	rjmp	.+208    	; 0x23a <KEYPAD_GETKEY+0x182>
			{
				while(!(keypadPIN & (1 << Keypad_Row[j])));
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	eb 81       	ldd	r30, Y+3	; 0x03
 16e:	fc 81       	ldd	r31, Y+4	; 0x04
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e8 59       	subi	r30, 0x98	; 152
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	00 80       	ld	r0, Z
 17c:	02 c0       	rjmp	.+4      	; 0x182 <KEYPAD_GETKEY+0xca>
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <KEYPAD_GETKEY+0xc6>
 186:	80 ff       	sbrs	r24, 0
 188:	f0 cf       	rjmp	.-32     	; 0x16a <KEYPAD_GETKEY+0xb2>
				switch(i){
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	91 05       	cpc	r25, r1
 192:	d9 f0       	breq	.+54     	; 0x1ca <KEYPAD_GETKEY+0x112>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <KEYPAD_GETKEY+0xea>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	91 05       	cpc	r25, r1
 19a:	59 f1       	breq	.+86     	; 0x1f2 <KEYPAD_GETKEY+0x13a>
 19c:	03 97       	sbiw	r24, 0x03	; 3
 19e:	e9 f1       	breq	.+122    	; 0x21a <KEYPAD_GETKEY+0x162>
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <KEYPAD_GETKEY+0x182>
					case (0):
					if (j == 0) return '7';
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	89 2b       	or	r24, r25
 1a8:	09 f4       	brne	.+2      	; 0x1ac <KEYPAD_GETKEY+0xf4>
 1aa:	5d c0       	rjmp	.+186    	; 0x266 <KEYPAD_GETKEY+0x1ae>
					else if (j == 1) return '4';
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <KEYPAD_GETKEY+0xfe>
 1b4:	5a c0       	rjmp	.+180    	; 0x26a <KEYPAD_GETKEY+0x1b2>
					else if (j == 2) return '1';
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ba:	02 97       	sbiw	r24, 0x02	; 2
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <KEYPAD_GETKEY+0x108>
 1be:	57 c0       	rjmp	.+174    	; 0x26e <KEYPAD_GETKEY+0x1b6>
					else if (j == 3) return '?';
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	9c 81       	ldd	r25, Y+4	; 0x04
 1c4:	03 97       	sbiw	r24, 0x03	; 3
 1c6:	c9 f5       	brne	.+114    	; 0x23a <KEYPAD_GETKEY+0x182>
 1c8:	54 c0       	rjmp	.+168    	; 0x272 <KEYPAD_GETKEY+0x1ba>
					break;
					case (1):
					if (j == 0) return '8';
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	89 2b       	or	r24, r25
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <KEYPAD_GETKEY+0x11c>
 1d2:	51 c0       	rjmp	.+162    	; 0x276 <KEYPAD_GETKEY+0x1be>
					else if (j == 1) return '5';
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	9c 81       	ldd	r25, Y+4	; 0x04
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	09 f4       	brne	.+2      	; 0x1de <KEYPAD_GETKEY+0x126>
 1dc:	4e c0       	rjmp	.+156    	; 0x27a <KEYPAD_GETKEY+0x1c2>
					else if (j == 2) return '2';
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <KEYPAD_GETKEY+0x130>
 1e6:	4b c0       	rjmp	.+150    	; 0x27e <KEYPAD_GETKEY+0x1c6>
					else if (j == 3) return '0';
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	03 97       	sbiw	r24, 0x03	; 3
 1ee:	29 f5       	brne	.+74     	; 0x23a <KEYPAD_GETKEY+0x182>
 1f0:	48 c0       	rjmp	.+144    	; 0x282 <KEYPAD_GETKEY+0x1ca>
					break;
					case (2):
					if (j == 0) return '9';
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	89 2b       	or	r24, r25
 1f8:	09 f4       	brne	.+2      	; 0x1fc <KEYPAD_GETKEY+0x144>
 1fa:	45 c0       	rjmp	.+138    	; 0x286 <KEYPAD_GETKEY+0x1ce>
					else if (j == 1) return '6';
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	09 f4       	brne	.+2      	; 0x206 <KEYPAD_GETKEY+0x14e>
 204:	42 c0       	rjmp	.+132    	; 0x28a <KEYPAD_GETKEY+0x1d2>
					else if (j == 2) return '3';
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	9c 81       	ldd	r25, Y+4	; 0x04
 20a:	02 97       	sbiw	r24, 0x02	; 2
 20c:	09 f4       	brne	.+2      	; 0x210 <KEYPAD_GETKEY+0x158>
 20e:	3f c0       	rjmp	.+126    	; 0x28e <KEYPAD_GETKEY+0x1d6>
					else if (j == 3) return '=';
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	03 97       	sbiw	r24, 0x03	; 3
 216:	89 f4       	brne	.+34     	; 0x23a <KEYPAD_GETKEY+0x182>
 218:	3c c0       	rjmp	.+120    	; 0x292 <KEYPAD_GETKEY+0x1da>
					break;
					case (3):
					if (j == 0) return '/';
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	9c 81       	ldd	r25, Y+4	; 0x04
 21e:	89 2b       	or	r24, r25
 220:	d1 f1       	breq	.+116    	; 0x296 <KEYPAD_GETKEY+0x1de>
					else if (j == 1) return '*';
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	9c 81       	ldd	r25, Y+4	; 0x04
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	c1 f1       	breq	.+112    	; 0x29a <KEYPAD_GETKEY+0x1e2>
					else if (j == 2) return '-';
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	9c 81       	ldd	r25, Y+4	; 0x04
 22e:	02 97       	sbiw	r24, 0x02	; 2
 230:	b1 f1       	breq	.+108    	; 0x29e <KEYPAD_GETKEY+0x1e6>
					else if (j == 3) return '+';
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	03 97       	sbiw	r24, 0x03	; 3
 238:	a1 f1       	breq	.+104    	; 0x2a2 <KEYPAD_GETKEY+0x1ea>
		SET_BIT(KEYPAD_PORT,Keypad_Col[0]) ;
		SET_BIT(KEYPAD_PORT,Keypad_Col[1]) ;
		SET_BIT(KEYPAD_PORT,Keypad_Col[2]) ;
		SET_BIT(KEYPAD_PORT,Keypad_Col[3]) ;
		RESET_BIT(KEYPAD_PORT,Keypad_Col[i]) ;
		for(j = 0; j < 4; j++){
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	9c 83       	std	Y+4, r25	; 0x04
 242:	8b 83       	std	Y+3, r24	; 0x03
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	04 97       	sbiw	r24, 0x04	; 4
 24a:	08 f4       	brcc	.+2      	; 0x24e <KEYPAD_GETKEY+0x196>
 24c:	7e cf       	rjmp	.-260    	; 0x14a <KEYPAD_GETKEY+0x92>

char KEYPAD_GETKEY(){
	
		volatile unsigned int i , j ;	
	
	for (i = 0; i < 4; i++){
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	9a 81       	ldd	r25, Y+2	; 0x02
 25c:	04 97       	sbiw	r24, 0x04	; 4
 25e:	08 f4       	brcc	.+2      	; 0x262 <KEYPAD_GETKEY+0x1aa>
 260:	34 cf       	rjmp	.-408    	; 0xca <KEYPAD_GETKEY+0x12>
					break;
				}
			}
		}
	}
	return 'A'; 
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
			if (!(keypadPIN & (1 << Keypad_Row[j])))
			{
				while(!(keypadPIN & (1 << Keypad_Row[j])));
				switch(i){
					case (0):
					if (j == 0) return '7';
 266:	87 e3       	ldi	r24, 0x37	; 55
 268:	1d c0       	rjmp	.+58     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 1) return '4';
 26a:	84 e3       	ldi	r24, 0x34	; 52
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 2) return '1';
 26e:	81 e3       	ldi	r24, 0x31	; 49
 270:	19 c0       	rjmp	.+50     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 3) return '?';
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					break;
					case (1):
					if (j == 0) return '8';
 276:	88 e3       	ldi	r24, 0x38	; 56
 278:	15 c0       	rjmp	.+42     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 1) return '5';
 27a:	85 e3       	ldi	r24, 0x35	; 53
 27c:	13 c0       	rjmp	.+38     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 2) return '2';
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 3) return '0';
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					break;
					case (2):
					if (j == 0) return '9';
 286:	89 e3       	ldi	r24, 0x39	; 57
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 1) return '6';
 28a:	86 e3       	ldi	r24, 0x36	; 54
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 2) return '3';
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 3) return '=';
 292:	8d e3       	ldi	r24, 0x3D	; 61
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					break;
					case (3):
					if (j == 0) return '/';
 296:	8f e2       	ldi	r24, 0x2F	; 47
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 1) return '*';
 29a:	8a e2       	ldi	r24, 0x2A	; 42
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 2) return '-';
 29e:	8d e2       	ldi	r24, 0x2D	; 45
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <KEYPAD_GETKEY+0x1ec>
					else if (j == 3) return '+';
 2a2:	8b e2       	ldi	r24, 0x2B	; 43
	
	
	
	
	
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <LCD_kick>:
	RESET_BIT(LCD_CTRL,RW_SWITCH);
}


void LCD_kick(void){
	SET_BIT(LCD_CTRL,EN_SWITCH);
 2b2:	88 b3       	in	r24, 0x18	; 24
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	90 e3       	ldi	r25, 0x30	; 48
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_kick+0xa>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_kick+0x10>
 2c2:	00 00       	nop
	_delay_ms(50);
	//Starts data read/write <<<
	RESET_BIT(LCD_CTRL,EN_SWITCH);
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	08 95       	ret

000002cc <LCD_stat>:


void LCD_stat(void) {
	
//DDRA set 0 read
	DataDir_LCD_PORT &= ~(0xFF<< DATA_shift) ;
 2cc:	8a b3       	in	r24, 0x1a	; 26
 2ce:	1a ba       	out	0x1a, r1	; 26
	
//1
	/*Selects read or write.
	0: Write 
	1: Read    <<<< */
	SET_BIT(LCD_CTRL,RW_SWITCH);
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	88 bb       	out	0x18, r24	; 24
//2	
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  <<<<<<<
	address counter (for read)
	1: Data register (for write and read) */
	RESET_BIT(LCD_CTRL,RS_SWITCH);
 2d6:	88 b3       	in	r24, 0x18	; 24
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	88 bb       	out	0x18, r24	; 24
	
//3
	LCD_kick();
 2dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_kick>
	
//4 
     //DDRA set 0 read
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 2e0:	8a b3       	in	r24, 0x1a	; 26
 2e2:	1a ba       	out	0x1a, r1	; 26
	
//5
	/*Selects read or write.
	0: Write  <<<<<<
	1: Read     */
	RESET_BIT(LCD_CTRL,RW_SWITCH);
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	08 95       	ret

000002ec <LCD_COMM>:
	//Starts data read/write <<<
	RESET_BIT(LCD_CTRL,EN_SWITCH);
}


void LCD_COMM(unsigned char command ){
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_stat();
 2f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_stat>
	LCD_PORT = command ;
 2f4:	cb bb       	out	0x1b, r28	; 27
	
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  <<<<<<<
	address counter (for read)
	1: Data register (for write and read) */
	RESET_BIT(LCD_CTRL,RS_SWITCH);
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	88 bb       	out	0x18, r24	; 24
	
	/*Selects read or write.
	0: Write <<<<
	1: Read*/
	RESET_BIT(LCD_CTRL,RW_SWITCH);
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	88 bb       	out	0x18, r24	; 24
 302:	81 ee       	ldi	r24, 0xE1	; 225
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_COMM+0x1a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_COMM+0x20>
 30c:	00 00       	nop
	
	_delay_ms(5);
	LCD_kick();
 30e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_kick>
	#endif
	
	
	
	
}
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <LCD_clear_screen>:
 316:	87 e8       	ldi	r24, 0x87	; 135
 318:	93 e1       	ldi	r25, 0x13	; 19
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_clear_screen+0x4>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_clear_screen+0xa>
 320:	00 00       	nop


void LCD_clear_screen(){
	_delay_ms(20);
	LCD_COMM(LCD_CLEAR_SCREEN) ;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_COMM>
 328:	08 95       	ret

0000032a <LCD_INIT>:
 32a:	83 ed       	ldi	r24, 0xD3	; 211
 32c:	90 e3       	ldi	r25, 0x30	; 48
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_INIT+0x4>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_INIT+0xa>
 334:	00 00       	nop

void LCD_INIT(void) {
	
	_delay_ms(50);
	//make the direction of the rw / rs / e pin as output
	SET_BIT(DataDir_LCD_CTRL,EN_SWITCH);
 336:	87 b3       	in	r24, 0x17	; 23
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DataDir_LCD_CTRL,RS_SWITCH);
 33c:	87 b3       	in	r24, 0x17	; 23
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DataDir_LCD_CTRL,RW_SWITCH);
 342:	87 b3       	in	r24, 0x17	; 23
 344:	84 60       	ori	r24, 0x04	; 4
 346:	87 bb       	out	0x17, r24	; 23
	
	//Starts data read/write <<<
	RESET_BIT(LCD_CTRL,EN_SWITCH);
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	88 bb       	out	0x18, r24	; 24

	/* Selects registers.
	0: Instruction register (for write) Busy flag:  <<<<<<<
	address counter (for read)
	1: Data register (for write and read) */
	RESET_BIT(LCD_CTRL,RS_SWITCH);
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	88 bb       	out	0x18, r24	; 24
	
	/*Selects read or write.
	0: Write <<<<
	1: Read*/
	RESET_BIT(LCD_CTRL,RW_SWITCH);
 354:	88 b3       	in	r24, 0x18	; 24
 356:	8b 7f       	andi	r24, 0xFB	; 251
 358:	88 bb       	out	0x18, r24	; 24
	
	//set direction of data pins of lcd as output
	DataDir_LCD_PORT = 0xFF ;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	8a bb       	out	0x1a, r24	; 26
 35e:	87 e8       	ldi	r24, 0x87	; 135
 360:	93 e1       	ldi	r25, 0x13	; 19
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_INIT+0x38>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_INIT+0x3e>
 368:	00 00       	nop
	_delay_ms(20);

	
	
	#ifdef EIGHT_BIT_MODE
	LCD_COMM(LCD_FUNCTION_8BIT_2LINES);
 36a:	88 e3       	ldi	r24, 0x38	; 56
 36c:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_COMM>
	#endif
	
	
	
	// instructions given by manufacture
	LCD_COMM(LCD_ENTRY_MODE);
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_COMM>
	LCD_COMM(LCD_BEGIN_AT_FIRST_ROW);
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_COMM>
	LCD_COMM(LCD_DISP_ON_CURSOR_BLINK);
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_COMM>
 382:	08 95       	ret

00000384 <LCD_WRITE_char>:
}


extern void LCD_WRITE_char(unsigned char character){
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
	
	#ifdef EIGHT_BIT_MODE
	LCD_stat();
 388:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_stat>
	LCD_PORT = character;
 38c:	cb bb       	out	0x1b, r28	; 27
	
	/*Selects read or write.
	0: Write <<<<
	1: Read*/
	RESET_BIT(LCD_CTRL,RW_SWITCH);
 38e:	88 b3       	in	r24, 0x18	; 24
 390:	8b 7f       	andi	r24, 0xFB	; 251
 392:	88 bb       	out	0x18, r24	; 24
	
	/* Selects registers.
	0: Instruction register (for write) Busy flag:  
	address counter (for read)
	1: Data register (for write and read)  <<<<<<< */
	SET_BIT(LCD_CTRL,RS_SWITCH);
 394:	88 b3       	in	r24, 0x18	; 24
 396:	82 60       	ori	r24, 0x02	; 2
 398:	88 bb       	out	0x18, r24	; 24
 39a:	89 ef       	ldi	r24, 0xF9	; 249
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_WRITE_char+0x1a>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_WRITE_char+0x20>
 3a4:	00 00       	nop
	
	_delay_ms(1);
	LCD_kick();
 3a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_kick>
	LCD_kick();
	#endif
	
	
	
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <main>:
#include "lcd_driver/lcd.h"
#include "keypad_driver/keypad.h"

int main(void)
{
	KEYPAD_INIT() ;
 3ae:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_INIT>
	LCD_INIT();
 3b2:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_INIT>
 3b6:	83 ed       	ldi	r24, 0xD3	; 211
 3b8:	90 e3       	ldi	r25, 0x30	; 48
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0xc>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x12>
 3c0:	00 00       	nop
	_delay_ms(50);
	unsigned char temp ;
    while (1) 
    {
		temp = KEYPAD_GETKEY() ;
 3c2:	0e 94 5c 00 	call	0xb8	; 0xb8 <KEYPAD_GETKEY>
		
		switch(temp){
 3c6:	8f 33       	cpi	r24, 0x3F	; 63
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <main+0x22>
 3ca:	81 34       	cpi	r24, 0x41	; 65
 3cc:	d1 f3       	breq	.-12     	; 0x3c2 <main+0x14>
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <main+0x28>
			case 'A':
			break;
			case '?':
			LCD_clear_screen();
 3d0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_clear_screen>
			break;
 3d4:	f6 cf       	rjmp	.-20     	; 0x3c2 <main+0x14>
			default:
			LCD_WRITE_char(temp);
 3d6:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_WRITE_char>
			break;
 3da:	f3 cf       	rjmp	.-26     	; 0x3c2 <main+0x14>

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
